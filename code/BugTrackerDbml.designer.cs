#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace bug_tracker.code
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="bug_tracker")]
	public partial class BugTrackerDbmlDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertproject(project instance);
    partial void Updateproject(project instance);
    partial void Deleteproject(project instance);
    partial void Insertbug_tracker_menu_header(bug_tracker_menu_header instance);
    partial void Updatebug_tracker_menu_header(bug_tracker_menu_header instance);
    partial void Deletebug_tracker_menu_header(bug_tracker_menu_header instance);
    partial void Insertbug_tracker_page(bug_tracker_page instance);
    partial void Updatebug_tracker_page(bug_tracker_page instance);
    partial void Deletebug_tracker_page(bug_tracker_page instance);
    partial void Insertbug_tracker_menu_page(bug_tracker_menu_page instance);
    partial void Updatebug_tracker_menu_page(bug_tracker_menu_page instance);
    partial void Deletebug_tracker_menu_page(bug_tracker_menu_page instance);
    partial void Insertticket_priority(ticket_priority instance);
    partial void Updateticket_priority(ticket_priority instance);
    partial void Deleteticket_priority(ticket_priority instance);
    partial void Insertticket_status(ticket_status instance);
    partial void Updateticket_status(ticket_status instance);
    partial void Deleteticket_status(ticket_status instance);
    partial void Insertlog_type(log_type instance);
    partial void Updatelog_type(log_type instance);
    partial void Deletelog_type(log_type instance);
    partial void Insertlog(log instance);
    partial void Updatelog(log instance);
    partial void Deletelog(log instance);
    partial void Insertticket(ticket instance);
    partial void Updateticket(ticket instance);
    partial void Deleteticket(ticket instance);
    partial void Insertnote(note instance);
    partial void Updatenote(note instance);
    partial void Deletenote(note instance);
    partial void Insertticket_attachment(ticket_attachment instance);
    partial void Updateticket_attachment(ticket_attachment instance);
    partial void Deleteticket_attachment(ticket_attachment instance);
    #endregion
		
		public BugTrackerDbmlDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["bug_trackerConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BugTrackerDbmlDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BugTrackerDbmlDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BugTrackerDbmlDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BugTrackerDbmlDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<project> projects
		{
			get
			{
				return this.GetTable<project>();
			}
		}
		
		public System.Data.Linq.Table<bug_tracker_menu_header> bug_tracker_menu_headers
		{
			get
			{
				return this.GetTable<bug_tracker_menu_header>();
			}
		}
		
		public System.Data.Linq.Table<bug_tracker_page> bug_tracker_pages
		{
			get
			{
				return this.GetTable<bug_tracker_page>();
			}
		}
		
		public System.Data.Linq.Table<bug_tracker_menu_page> bug_tracker_menu_pages
		{
			get
			{
				return this.GetTable<bug_tracker_menu_page>();
			}
		}
		
		public System.Data.Linq.Table<bug_tracker_menu_submenus> bug_tracker_menu_submenus
		{
			get
			{
				return this.GetTable<bug_tracker_menu_submenus>();
			}
		}
		
		public System.Data.Linq.Table<ticket_priority> ticket_priorities
		{
			get
			{
				return this.GetTable<ticket_priority>();
			}
		}
		
		public System.Data.Linq.Table<ticket_status> ticket_status
		{
			get
			{
				return this.GetTable<ticket_status>();
			}
		}
		
		public System.Data.Linq.Table<log_type> log_types
		{
			get
			{
				return this.GetTable<log_type>();
			}
		}
		
		public System.Data.Linq.Table<log> logs
		{
			get
			{
				return this.GetTable<log>();
			}
		}
		
		public System.Data.Linq.Table<ticket> tickets
		{
			get
			{
				return this.GetTable<ticket>();
			}
		}
		
		public System.Data.Linq.Table<note> notes
		{
			get
			{
				return this.GetTable<note>();
			}
		}
		
		public System.Data.Linq.Table<ticket_attachment> ticket_attachments
		{
			get
			{
				return this.GetTable<ticket_attachment>();
			}
		}
		
		public System.Data.Linq.Table<bug_tracker_menu_role> bug_tracker_menu_roles
		{
			get
			{
				return this.GetTable<bug_tracker_menu_role>();
			}
		}
		
		public System.Data.Linq.Table<bug_tracker_pages_role> bug_tracker_pages_roles
		{
			get
			{
				return this.GetTable<bug_tracker_pages_role>();
			}
		}
		
		public System.Data.Linq.Table<bug_tracker_roles_id> bug_tracker_roles_ids
		{
			get
			{
				return this.GetTable<bug_tracker_roles_id>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.projects")]
	public partial class project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _name;
		
		private System.DateTime _created_date;
		
		private long _created_by;
		
		private int _status;
		
		private string _description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Oncreated_dateChanging(System.DateTime value);
    partial void Oncreated_dateChanged();
    partial void Oncreated_byChanging(long value);
    partial void Oncreated_byChanged();
    partial void OnstatusChanging(int value);
    partial void OnstatusChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public project()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created_date", DbType="DateTime NOT NULL")]
		public System.DateTime created_date
		{
			get
			{
				return this._created_date;
			}
			set
			{
				if ((this._created_date != value))
				{
					this.Oncreated_dateChanging(value);
					this.SendPropertyChanging();
					this._created_date = value;
					this.SendPropertyChanged("created_date");
					this.Oncreated_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created_by", DbType="BigInt NOT NULL")]
		public long created_by
		{
			get
			{
				return this._created_by;
			}
			set
			{
				if ((this._created_by != value))
				{
					this.Oncreated_byChanging(value);
					this.SendPropertyChanging();
					this._created_by = value;
					this.SendPropertyChanged("created_by");
					this.Oncreated_byChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Int NOT NULL")]
		public int status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(MAX)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.bug_tracker_menu_headers")]
	public partial class bug_tracker_menu_header : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _menu_title;
		
		private System.Nullable<bool> _has_submenu;
		
		private System.Nullable<bool> _top_level;
		
		private EntitySet<bug_tracker_menu_page> _bug_tracker_menu_pages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onmenu_titleChanging(string value);
    partial void Onmenu_titleChanged();
    partial void Onhas_submenuChanging(System.Nullable<bool> value);
    partial void Onhas_submenuChanged();
    partial void Ontop_levelChanging(System.Nullable<bool> value);
    partial void Ontop_levelChanged();
    #endregion
		
		public bug_tracker_menu_header()
		{
			this._bug_tracker_menu_pages = new EntitySet<bug_tracker_menu_page>(new Action<bug_tracker_menu_page>(this.attach_bug_tracker_menu_pages), new Action<bug_tracker_menu_page>(this.detach_bug_tracker_menu_pages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_menu_title", DbType="NVarChar(250)")]
		public string menu_title
		{
			get
			{
				return this._menu_title;
			}
			set
			{
				if ((this._menu_title != value))
				{
					this.Onmenu_titleChanging(value);
					this.SendPropertyChanging();
					this._menu_title = value;
					this.SendPropertyChanged("menu_title");
					this.Onmenu_titleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_has_submenu", DbType="Bit")]
		public System.Nullable<bool> has_submenu
		{
			get
			{
				return this._has_submenu;
			}
			set
			{
				if ((this._has_submenu != value))
				{
					this.Onhas_submenuChanging(value);
					this.SendPropertyChanging();
					this._has_submenu = value;
					this.SendPropertyChanged("has_submenu");
					this.Onhas_submenuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_top_level", DbType="Bit")]
		public System.Nullable<bool> top_level
		{
			get
			{
				return this._top_level;
			}
			set
			{
				if ((this._top_level != value))
				{
					this.Ontop_levelChanging(value);
					this.SendPropertyChanging();
					this._top_level = value;
					this.SendPropertyChanged("top_level");
					this.Ontop_levelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="bug_tracker_menu_header_bug_tracker_menu_page", Storage="_bug_tracker_menu_pages", ThisKey="id", OtherKey="menu_id")]
		public EntitySet<bug_tracker_menu_page> bug_tracker_menu_pages
		{
			get
			{
				return this._bug_tracker_menu_pages;
			}
			set
			{
				this._bug_tracker_menu_pages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_bug_tracker_menu_pages(bug_tracker_menu_page entity)
		{
			this.SendPropertyChanging();
			entity.bug_tracker_menu_header = this;
		}
		
		private void detach_bug_tracker_menu_pages(bug_tracker_menu_page entity)
		{
			this.SendPropertyChanging();
			entity.bug_tracker_menu_header = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.bug_tracker_pages")]
	public partial class bug_tracker_page : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _page_url;
		
		private string _description;
		
		private string _name;
		
		private string _friendly_url;
		
		private System.Nullable<int> _sequence;
		
		private string _icon;
		
		private EntitySet<bug_tracker_menu_page> _bug_tracker_menu_pages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onpage_urlChanging(string value);
    partial void Onpage_urlChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onfriendly_urlChanging(string value);
    partial void Onfriendly_urlChanged();
    partial void OnsequenceChanging(System.Nullable<int> value);
    partial void OnsequenceChanged();
    partial void OniconChanging(string value);
    partial void OniconChanged();
    #endregion
		
		public bug_tracker_page()
		{
			this._bug_tracker_menu_pages = new EntitySet<bug_tracker_menu_page>(new Action<bug_tracker_menu_page>(this.attach_bug_tracker_menu_pages), new Action<bug_tracker_menu_page>(this.detach_bug_tracker_menu_pages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_page_url", DbType="NVarChar(MAX)")]
		public string page_url
		{
			get
			{
				return this._page_url;
			}
			set
			{
				if ((this._page_url != value))
				{
					this.Onpage_urlChanging(value);
					this.SendPropertyChanging();
					this._page_url = value;
					this.SendPropertyChanged("page_url");
					this.Onpage_urlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(MAX)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_friendly_url", DbType="NVarChar(MAX)")]
		public string friendly_url
		{
			get
			{
				return this._friendly_url;
			}
			set
			{
				if ((this._friendly_url != value))
				{
					this.Onfriendly_urlChanging(value);
					this.SendPropertyChanging();
					this._friendly_url = value;
					this.SendPropertyChanged("friendly_url");
					this.Onfriendly_urlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sequence", DbType="Int")]
		public System.Nullable<int> sequence
		{
			get
			{
				return this._sequence;
			}
			set
			{
				if ((this._sequence != value))
				{
					this.OnsequenceChanging(value);
					this.SendPropertyChanging();
					this._sequence = value;
					this.SendPropertyChanged("sequence");
					this.OnsequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_icon", DbType="NVarChar(50)")]
		public string icon
		{
			get
			{
				return this._icon;
			}
			set
			{
				if ((this._icon != value))
				{
					this.OniconChanging(value);
					this.SendPropertyChanging();
					this._icon = value;
					this.SendPropertyChanged("icon");
					this.OniconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="bug_tracker_page_bug_tracker_menu_page", Storage="_bug_tracker_menu_pages", ThisKey="id", OtherKey="page_id")]
		public EntitySet<bug_tracker_menu_page> bug_tracker_menu_pages
		{
			get
			{
				return this._bug_tracker_menu_pages;
			}
			set
			{
				this._bug_tracker_menu_pages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_bug_tracker_menu_pages(bug_tracker_menu_page entity)
		{
			this.SendPropertyChanging();
			entity.bug_tracker_page = this;
		}
		
		private void detach_bug_tracker_menu_pages(bug_tracker_menu_page entity)
		{
			this.SendPropertyChanging();
			entity.bug_tracker_page = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.bug_tracker_menu_pages")]
	public partial class bug_tracker_menu_page : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _menu_id;
		
		private long _page_id;
		
		private EntityRef<bug_tracker_menu_header> _bug_tracker_menu_header;
		
		private EntityRef<bug_tracker_page> _bug_tracker_page;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onmenu_idChanging(int value);
    partial void Onmenu_idChanged();
    partial void Onpage_idChanging(long value);
    partial void Onpage_idChanged();
    #endregion
		
		public bug_tracker_menu_page()
		{
			this._bug_tracker_menu_header = default(EntityRef<bug_tracker_menu_header>);
			this._bug_tracker_page = default(EntityRef<bug_tracker_page>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_menu_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int menu_id
		{
			get
			{
				return this._menu_id;
			}
			set
			{
				if ((this._menu_id != value))
				{
					if (this._bug_tracker_menu_header.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onmenu_idChanging(value);
					this.SendPropertyChanging();
					this._menu_id = value;
					this.SendPropertyChanged("menu_id");
					this.Onmenu_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_page_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long page_id
		{
			get
			{
				return this._page_id;
			}
			set
			{
				if ((this._page_id != value))
				{
					if (this._bug_tracker_page.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onpage_idChanging(value);
					this.SendPropertyChanging();
					this._page_id = value;
					this.SendPropertyChanged("page_id");
					this.Onpage_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="bug_tracker_menu_header_bug_tracker_menu_page", Storage="_bug_tracker_menu_header", ThisKey="menu_id", OtherKey="id", IsForeignKey=true)]
		public bug_tracker_menu_header bug_tracker_menu_header
		{
			get
			{
				return this._bug_tracker_menu_header.Entity;
			}
			set
			{
				bug_tracker_menu_header previousValue = this._bug_tracker_menu_header.Entity;
				if (((previousValue != value) 
							|| (this._bug_tracker_menu_header.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._bug_tracker_menu_header.Entity = null;
						previousValue.bug_tracker_menu_pages.Remove(this);
					}
					this._bug_tracker_menu_header.Entity = value;
					if ((value != null))
					{
						value.bug_tracker_menu_pages.Add(this);
						this._menu_id = value.id;
					}
					else
					{
						this._menu_id = default(int);
					}
					this.SendPropertyChanged("bug_tracker_menu_header");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="bug_tracker_page_bug_tracker_menu_page", Storage="_bug_tracker_page", ThisKey="page_id", OtherKey="id", IsForeignKey=true)]
		public bug_tracker_page bug_tracker_page
		{
			get
			{
				return this._bug_tracker_page.Entity;
			}
			set
			{
				bug_tracker_page previousValue = this._bug_tracker_page.Entity;
				if (((previousValue != value) 
							|| (this._bug_tracker_page.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._bug_tracker_page.Entity = null;
						previousValue.bug_tracker_menu_pages.Remove(this);
					}
					this._bug_tracker_page.Entity = value;
					if ((value != null))
					{
						value.bug_tracker_menu_pages.Add(this);
						this._page_id = value.id;
					}
					else
					{
						this._page_id = default(long);
					}
					this.SendPropertyChanged("bug_tracker_page");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.bug_tracker_menu_submenus")]
	public partial class bug_tracker_menu_submenus
	{
		
		private System.Nullable<int> _menu_header_id;
		
		private System.Nullable<int> _submenu_id;
		
		public bug_tracker_menu_submenus()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_menu_header_id", DbType="Int")]
		public System.Nullable<int> menu_header_id
		{
			get
			{
				return this._menu_header_id;
			}
			set
			{
				if ((this._menu_header_id != value))
				{
					this._menu_header_id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_submenu_id", DbType="Int")]
		public System.Nullable<int> submenu_id
		{
			get
			{
				return this._submenu_id;
			}
			set
			{
				if ((this._submenu_id != value))
				{
					this._submenu_id = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ticket_priority")]
	public partial class ticket_priority : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _description;
		
		private EntitySet<ticket> _tickets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public ticket_priority()
		{
			this._tickets = new EntitySet<ticket>(new Action<ticket>(this.attach_tickets), new Action<ticket>(this.detach_tickets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(25)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ticket_priority_ticket", Storage="_tickets", ThisKey="id", OtherKey="priority")]
		public EntitySet<ticket> tickets
		{
			get
			{
				return this._tickets;
			}
			set
			{
				this._tickets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tickets(ticket entity)
		{
			this.SendPropertyChanging();
			entity.ticket_priority = this;
		}
		
		private void detach_tickets(ticket entity)
		{
			this.SendPropertyChanging();
			entity.ticket_priority = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ticket_status")]
	public partial class ticket_status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _description;
		
		private EntitySet<ticket> _tickets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public ticket_status()
		{
			this._tickets = new EntitySet<ticket>(new Action<ticket>(this.attach_tickets), new Action<ticket>(this.detach_tickets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(50)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ticket_status_ticket", Storage="_tickets", ThisKey="id", OtherKey="status")]
		public EntitySet<ticket> tickets
		{
			get
			{
				return this._tickets;
			}
			set
			{
				this._tickets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tickets(ticket entity)
		{
			this.SendPropertyChanging();
			entity.ticket_status = this;
		}
		
		private void detach_tickets(ticket entity)
		{
			this.SendPropertyChanging();
			entity.ticket_status = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.log_type")]
	public partial class log_type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _log_type1;
		
		private EntitySet<log> _logs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onlog_type1Changing(string value);
    partial void Onlog_type1Changed();
    #endregion
		
		public log_type()
		{
			this._logs = new EntitySet<log>(new Action<log>(this.attach_logs), new Action<log>(this.detach_logs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="log_type", Storage="_log_type1", DbType="NVarChar(50)")]
		public string log_type1
		{
			get
			{
				return this._log_type1;
			}
			set
			{
				if ((this._log_type1 != value))
				{
					this.Onlog_type1Changing(value);
					this.SendPropertyChanging();
					this._log_type1 = value;
					this.SendPropertyChanged("log_type1");
					this.Onlog_type1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="log_type_log", Storage="_logs", ThisKey="id", OtherKey="log_type")]
		public EntitySet<log> logs
		{
			get
			{
				return this._logs;
			}
			set
			{
				this._logs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_logs(log entity)
		{
			this.SendPropertyChanging();
			entity.log_type1 = this;
		}
		
		private void detach_logs(log entity)
		{
			this.SendPropertyChanging();
			entity.log_type1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.logs")]
	public partial class log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<long> _obj_id;
		
		private string _log_description;
		
		private string _exception_messaage;
		
		private string _exception_stacktrace;
		
		private System.Nullable<int> _log_type;
		
		private string _userid;
		
		private System.Nullable<System.DateTime> _created_date;
		
		private EntityRef<log_type> _log_type1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onobj_idChanging(System.Nullable<long> value);
    partial void Onobj_idChanged();
    partial void Onlog_descriptionChanging(string value);
    partial void Onlog_descriptionChanged();
    partial void Onexception_messaageChanging(string value);
    partial void Onexception_messaageChanged();
    partial void Onexception_stacktraceChanging(string value);
    partial void Onexception_stacktraceChanged();
    partial void Onlog_typeChanging(System.Nullable<int> value);
    partial void Onlog_typeChanged();
    partial void OnuseridChanging(string value);
    partial void OnuseridChanged();
    partial void Oncreated_dateChanging(System.Nullable<System.DateTime> value);
    partial void Oncreated_dateChanged();
    #endregion
		
		public log()
		{
			this._log_type1 = default(EntityRef<log_type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_obj_id", DbType="BigInt")]
		public System.Nullable<long> obj_id
		{
			get
			{
				return this._obj_id;
			}
			set
			{
				if ((this._obj_id != value))
				{
					this.Onobj_idChanging(value);
					this.SendPropertyChanging();
					this._obj_id = value;
					this.SendPropertyChanged("obj_id");
					this.Onobj_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_log_description", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string log_description
		{
			get
			{
				return this._log_description;
			}
			set
			{
				if ((this._log_description != value))
				{
					this.Onlog_descriptionChanging(value);
					this.SendPropertyChanging();
					this._log_description = value;
					this.SendPropertyChanged("log_description");
					this.Onlog_descriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exception_messaage", DbType="NVarChar(MAX)")]
		public string exception_messaage
		{
			get
			{
				return this._exception_messaage;
			}
			set
			{
				if ((this._exception_messaage != value))
				{
					this.Onexception_messaageChanging(value);
					this.SendPropertyChanging();
					this._exception_messaage = value;
					this.SendPropertyChanged("exception_messaage");
					this.Onexception_messaageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exception_stacktrace", DbType="NVarChar(MAX)")]
		public string exception_stacktrace
		{
			get
			{
				return this._exception_stacktrace;
			}
			set
			{
				if ((this._exception_stacktrace != value))
				{
					this.Onexception_stacktraceChanging(value);
					this.SendPropertyChanging();
					this._exception_stacktrace = value;
					this.SendPropertyChanged("exception_stacktrace");
					this.Onexception_stacktraceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_log_type", DbType="Int")]
		public System.Nullable<int> log_type
		{
			get
			{
				return this._log_type;
			}
			set
			{
				if ((this._log_type != value))
				{
					if (this._log_type1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onlog_typeChanging(value);
					this.SendPropertyChanging();
					this._log_type = value;
					this.SendPropertyChanged("log_type");
					this.Onlog_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userid", DbType="NVarChar(250)")]
		public string userid
		{
			get
			{
				return this._userid;
			}
			set
			{
				if ((this._userid != value))
				{
					this.OnuseridChanging(value);
					this.SendPropertyChanging();
					this._userid = value;
					this.SendPropertyChanged("userid");
					this.OnuseridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> created_date
		{
			get
			{
				return this._created_date;
			}
			set
			{
				if ((this._created_date != value))
				{
					this.Oncreated_dateChanging(value);
					this.SendPropertyChanging();
					this._created_date = value;
					this.SendPropertyChanged("created_date");
					this.Oncreated_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="log_type_log", Storage="_log_type1", ThisKey="log_type", OtherKey="id", IsForeignKey=true)]
		public log_type log_type1
		{
			get
			{
				return this._log_type1.Entity;
			}
			set
			{
				log_type previousValue = this._log_type1.Entity;
				if (((previousValue != value) 
							|| (this._log_type1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._log_type1.Entity = null;
						previousValue.logs.Remove(this);
					}
					this._log_type1.Entity = value;
					if ((value != null))
					{
						value.logs.Add(this);
						this._log_type = value.id;
					}
					else
					{
						this._log_type = default(Nullable<int>);
					}
					this.SendPropertyChanged("log_type1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tickets")]
	public partial class ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.DateTime _created_date;
		
		private string _created_by;
		
		private string _title;
		
		private string _description;
		
		private int _status;
		
		private int _priority;
		
		private EntitySet<note> _notes;
		
		private EntitySet<ticket_attachment> _ticket_attachments;
		
		private EntityRef<ticket_priority> _ticket_priority;
		
		private EntityRef<ticket_status> _ticket_status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Oncreated_dateChanging(System.DateTime value);
    partial void Oncreated_dateChanged();
    partial void Oncreated_byChanging(string value);
    partial void Oncreated_byChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnstatusChanging(int value);
    partial void OnstatusChanged();
    partial void OnpriorityChanging(int value);
    partial void OnpriorityChanged();
    #endregion
		
		public ticket()
		{
			this._notes = new EntitySet<note>(new Action<note>(this.attach_notes), new Action<note>(this.detach_notes));
			this._ticket_attachments = new EntitySet<ticket_attachment>(new Action<ticket_attachment>(this.attach_ticket_attachments), new Action<ticket_attachment>(this.detach_ticket_attachments));
			this._ticket_priority = default(EntityRef<ticket_priority>);
			this._ticket_status = default(EntityRef<ticket_status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created_date", DbType="DateTime NOT NULL")]
		public System.DateTime created_date
		{
			get
			{
				return this._created_date;
			}
			set
			{
				if ((this._created_date != value))
				{
					this.Oncreated_dateChanging(value);
					this.SendPropertyChanging();
					this._created_date = value;
					this.SendPropertyChanged("created_date");
					this.Oncreated_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created_by", DbType="NVarChar(150)")]
		public string created_by
		{
			get
			{
				return this._created_by;
			}
			set
			{
				if ((this._created_by != value))
				{
					this.Oncreated_byChanging(value);
					this.SendPropertyChanging();
					this._created_by = value;
					this.SendPropertyChanged("created_by");
					this.Oncreated_byChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(MAX)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Int NOT NULL")]
		public int status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					if (this._ticket_status.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_priority", DbType="Int NOT NULL")]
		public int priority
		{
			get
			{
				return this._priority;
			}
			set
			{
				if ((this._priority != value))
				{
					if (this._ticket_priority.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpriorityChanging(value);
					this.SendPropertyChanging();
					this._priority = value;
					this.SendPropertyChanged("priority");
					this.OnpriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ticket_note", Storage="_notes", ThisKey="id", OtherKey="ticket_id")]
		public EntitySet<note> notes
		{
			get
			{
				return this._notes;
			}
			set
			{
				this._notes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ticket_ticket_attachment", Storage="_ticket_attachments", ThisKey="id", OtherKey="ticket_id")]
		public EntitySet<ticket_attachment> ticket_attachments
		{
			get
			{
				return this._ticket_attachments;
			}
			set
			{
				this._ticket_attachments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ticket_priority_ticket", Storage="_ticket_priority", ThisKey="priority", OtherKey="id", IsForeignKey=true)]
		public ticket_priority ticket_priority
		{
			get
			{
				return this._ticket_priority.Entity;
			}
			set
			{
				ticket_priority previousValue = this._ticket_priority.Entity;
				if (((previousValue != value) 
							|| (this._ticket_priority.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ticket_priority.Entity = null;
						previousValue.tickets.Remove(this);
					}
					this._ticket_priority.Entity = value;
					if ((value != null))
					{
						value.tickets.Add(this);
						this._priority = value.id;
					}
					else
					{
						this._priority = default(int);
					}
					this.SendPropertyChanged("ticket_priority");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ticket_status_ticket", Storage="_ticket_status", ThisKey="status", OtherKey="id", IsForeignKey=true)]
		public ticket_status ticket_status
		{
			get
			{
				return this._ticket_status.Entity;
			}
			set
			{
				ticket_status previousValue = this._ticket_status.Entity;
				if (((previousValue != value) 
							|| (this._ticket_status.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ticket_status.Entity = null;
						previousValue.tickets.Remove(this);
					}
					this._ticket_status.Entity = value;
					if ((value != null))
					{
						value.tickets.Add(this);
						this._status = value.id;
					}
					else
					{
						this._status = default(int);
					}
					this.SendPropertyChanged("ticket_status");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_notes(note entity)
		{
			this.SendPropertyChanging();
			entity.ticket = this;
		}
		
		private void detach_notes(note entity)
		{
			this.SendPropertyChanging();
			entity.ticket = null;
		}
		
		private void attach_ticket_attachments(ticket_attachment entity)
		{
			this.SendPropertyChanging();
			entity.ticket = this;
		}
		
		private void detach_ticket_attachments(ticket_attachment entity)
		{
			this.SendPropertyChanging();
			entity.ticket = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.notes")]
	public partial class note : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private System.Nullable<long> _ticket_id;
		
		private string _message;
		
		private System.Nullable<System.DateTime> _created_date;
		
		private string _creator_id;
		
		private EntityRef<ticket> _ticket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onticket_idChanging(System.Nullable<long> value);
    partial void Onticket_idChanged();
    partial void OnmessageChanging(string value);
    partial void OnmessageChanged();
    partial void Oncreated_dateChanging(System.Nullable<System.DateTime> value);
    partial void Oncreated_dateChanged();
    partial void Oncreator_idChanging(string value);
    partial void Oncreator_idChanged();
    #endregion
		
		public note()
		{
			this._ticket = default(EntityRef<ticket>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ticket_id", DbType="BigInt")]
		public System.Nullable<long> ticket_id
		{
			get
			{
				return this._ticket_id;
			}
			set
			{
				if ((this._ticket_id != value))
				{
					if (this._ticket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onticket_idChanging(value);
					this.SendPropertyChanging();
					this._ticket_id = value;
					this.SendPropertyChanged("ticket_id");
					this.Onticket_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_message", DbType="NVarChar(MAX)")]
		public string message
		{
			get
			{
				return this._message;
			}
			set
			{
				if ((this._message != value))
				{
					this.OnmessageChanging(value);
					this.SendPropertyChanging();
					this._message = value;
					this.SendPropertyChanged("message");
					this.OnmessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> created_date
		{
			get
			{
				return this._created_date;
			}
			set
			{
				if ((this._created_date != value))
				{
					this.Oncreated_dateChanging(value);
					this.SendPropertyChanging();
					this._created_date = value;
					this.SendPropertyChanged("created_date");
					this.Oncreated_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creator_id", DbType="NVarChar(150)")]
		public string creator_id
		{
			get
			{
				return this._creator_id;
			}
			set
			{
				if ((this._creator_id != value))
				{
					this.Oncreator_idChanging(value);
					this.SendPropertyChanging();
					this._creator_id = value;
					this.SendPropertyChanged("creator_id");
					this.Oncreator_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ticket_note", Storage="_ticket", ThisKey="ticket_id", OtherKey="id", IsForeignKey=true)]
		public ticket ticket
		{
			get
			{
				return this._ticket.Entity;
			}
			set
			{
				ticket previousValue = this._ticket.Entity;
				if (((previousValue != value) 
							|| (this._ticket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ticket.Entity = null;
						previousValue.notes.Remove(this);
					}
					this._ticket.Entity = value;
					if ((value != null))
					{
						value.notes.Add(this);
						this._ticket_id = value.id;
					}
					else
					{
						this._ticket_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("ticket");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ticket_attachment")]
	public partial class ticket_attachment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _ticket_id;
		
		private string _attachment_location;
		
		private EntityRef<ticket> _ticket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void Onticket_idChanging(long value);
    partial void Onticket_idChanged();
    partial void Onattachment_locationChanging(string value);
    partial void Onattachment_locationChanged();
    #endregion
		
		public ticket_attachment()
		{
			this._ticket = default(EntityRef<ticket>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ticket_id", DbType="BigInt NOT NULL")]
		public long ticket_id
		{
			get
			{
				return this._ticket_id;
			}
			set
			{
				if ((this._ticket_id != value))
				{
					if (this._ticket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onticket_idChanging(value);
					this.SendPropertyChanging();
					this._ticket_id = value;
					this.SendPropertyChanged("ticket_id");
					this.Onticket_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_attachment_location", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string attachment_location
		{
			get
			{
				return this._attachment_location;
			}
			set
			{
				if ((this._attachment_location != value))
				{
					this.Onattachment_locationChanging(value);
					this.SendPropertyChanging();
					this._attachment_location = value;
					this.SendPropertyChanged("attachment_location");
					this.Onattachment_locationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ticket_ticket_attachment", Storage="_ticket", ThisKey="ticket_id", OtherKey="id", IsForeignKey=true)]
		public ticket ticket
		{
			get
			{
				return this._ticket.Entity;
			}
			set
			{
				ticket previousValue = this._ticket.Entity;
				if (((previousValue != value) 
							|| (this._ticket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ticket.Entity = null;
						previousValue.ticket_attachments.Remove(this);
					}
					this._ticket.Entity = value;
					if ((value != null))
					{
						value.ticket_attachments.Add(this);
						this._ticket_id = value.id;
					}
					else
					{
						this._ticket_id = default(long);
					}
					this.SendPropertyChanged("ticket");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.bug_tracker_menu_roles")]
	public partial class bug_tracker_menu_role
	{
		
		private System.Nullable<long> _menu_id;
		
		private System.Nullable<long> _role_id;
		
		public bug_tracker_menu_role()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_menu_id", DbType="BigInt")]
		public System.Nullable<long> menu_id
		{
			get
			{
				return this._menu_id;
			}
			set
			{
				if ((this._menu_id != value))
				{
					this._menu_id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role_id", DbType="BigInt")]
		public System.Nullable<long> role_id
		{
			get
			{
				return this._role_id;
			}
			set
			{
				if ((this._role_id != value))
				{
					this._role_id = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.bug_tracker_pages_roles")]
	public partial class bug_tracker_pages_role
	{
		
		private System.Nullable<long> _page_id;
		
		private System.Nullable<long> _role_id;
		
		public bug_tracker_pages_role()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_page_id", DbType="BigInt")]
		public System.Nullable<long> page_id
		{
			get
			{
				return this._page_id;
			}
			set
			{
				if ((this._page_id != value))
				{
					this._page_id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role_id", DbType="BigInt")]
		public System.Nullable<long> role_id
		{
			get
			{
				return this._role_id;
			}
			set
			{
				if ((this._role_id != value))
				{
					this._role_id = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.bug_tracker_roles_id")]
	public partial class bug_tracker_roles_id
	{
		
		private string _role_id;
		
		private System.Nullable<long> _page_id;
		
		public bug_tracker_roles_id()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role_id", DbType="NVarChar(MAX)")]
		public string role_id
		{
			get
			{
				return this._role_id;
			}
			set
			{
				if ((this._role_id != value))
				{
					this._role_id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_page_id", DbType="BigInt")]
		public System.Nullable<long> page_id
		{
			get
			{
				return this._page_id;
			}
			set
			{
				if ((this._page_id != value))
				{
					this._page_id = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
